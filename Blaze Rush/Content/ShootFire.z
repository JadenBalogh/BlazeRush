class ShootFire : ZilchComponent
{
    [Property]
    var Projectile : Archetype = null; // What we are shooting
    [Property]
    var ShotSpeed : Real = 20; // How fast we are shooting it
    [Property] 
    var Cooldown : Real = 1;
    [Property] 
    var KeyShoot : Keys;
    [Property] 
    var ShootCue : SoundCue = null;
    
    var TimeSinceLast : Real = 0.0;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);  
        
        var timeSinceLast = 0.0;
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if (this.TimeSinceLast > 0.0)
        {
            this.TimeSinceLast -= event.Dt;
        }
        else
        {
            this.TimeSinceLast = 0.0;
        }
        
        if (Zero.Keyboard.KeyIsPressed(this.KeyShoot) && this.TimeSinceLast == 0)
        {
            var direction = Real3(1.0, 0.0, 0.0);
            var position = this.Owner.Transform.WorldTranslation;
            var speed = Real3(this.ShotSpeed, 0.0, 0.0);
            
            position += Real3(1.0, 0.0, 0.0);
            if (this.Owner.Sprite.FlipX)
            {
                direction = Real3(-1.0, 0.0, 0.0);
                position += Real3(-2.0, 0.0, 0.0);
            }
            
            this.Owner.SimpleSound.Cue = this.ShootCue;
            this.Owner.SimpleSound.Play();
            
            var shot = this.Space.CreateAtPosition(this.Projectile, position);
            if (shot != null)
            {
                shot.RigidBody.Velocity = direction * speed;
            }
            
            this.TimeSinceLast = this.Cooldown;
        }
    }
}
